version: '3.8'

# Volumes that bind to local directories.
x-local_volumes: &local_volumes
  {%- if cookiecutter.mode == "development" %}
  # In dev mode, it mounts the local FS in the containers
  # instead of copying the code over, so you can easily test
  # new code.
  volumes:
    # Code.
    - ./mallard:/home/mallard/mallard
    # Config.
    - ~/.config/mallard:/home/mallard/.config/mallard
  {% else %}
  {}
  {% endif %}

# Portions of the backup services that are the same.volumes:
x-backup_service_common: &backup_service_common
  build:
    dockerfile: dockerfiles/Dockerfile
    context: .
    target: backup
  security_opt:
    - apparmor:unconfined
  cap_add:
    - SYS_ADMIN
  devices:
    - /dev/fuse
  networks:
    - mallard

services:

  # Gateway service.
  gateway:
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
      target: gateway
    hostname: gateway
    networks:
      - mallard
    << : *local_volumes

  # Edge service.
  edge:
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
      target: edge
    hostname: edge
    networks:
      - mallard
    << : *local_volumes

  # Transcoder service.
  transcoder:
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
      target: transcoder
    hostname: transcoder
    networks:
      - mallard
    <<: *local_volumes

  # Object storage service.
  object_store:
    image: minio/minio
    hostname: object-store
    volumes:
      - {{cookiecutter.object_location}}:/data
    environment:
      MINIO_ROOT_USER: minio_user_51c173
      MINIO_ROOT_PASSWORD: HFgwH5U5RNaAbe
    networks:
      - mallard
    command: "server /data"

  # Backup service.
  {%- if cookiecutter.backup == "yes" %}
  backup_videos:
    hostname: backup-videos
    depends_on:
      - object_store
    environment:
      # Use MinIO credentials.
      AWS_S3_SECRET_ACCESS_KEY: HFgwH5U5RNaAbe
      AWS_S3_ACCESS_KEY_ID: minio_user_51c173
      S3FS_ARGS: use_path_request_style
      AWS_S3_BUCKET: mallard-videos
      # Use correct endpoint.
      AWS_S3_URL: "http://object-store:9000"
    volumes:
      - ./backups/videos:/opt/s3fs/bucket:rshared
    <<: *backup_service_common

  backup_images:
    hostname: backup-images
    depends_on:
      - object_store
    environment:
      # Use MinIO credentials.
      AWS_S3_SECRET_ACCESS_KEY: HFgwH5U5RNaAbe
      AWS_S3_ACCESS_KEY_ID: minio_user_51c173
      S3FS_ARGS: use_path_request_style
      AWS_S3_BUCKET: mallard-images
      # Use correct endpoint.
      AWS_S3_URL: "http://object-store:9000"
    volumes:
      - ./backups/images:/opt/s3fs/bucket:rshared
    <<: *backup_service_common

  backup_metadata:
    hostname: backup-metadata
    depends_on:
      - metadata_store
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
      target: backup_metadata
    volumes:
      - ./backups/metadata:/backups
    networks:
      - mallard

  {% endif %}

  # Metadata storage service.
  metadata_store:
    image: mariadb:10.11
    hostname: metadata-store
    volumes:
      - {{cookiecutter.metadata_location}}:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: TnrHYavLF7WF38
      MARIADB_DATABASE: mallard_meta
    networks:
      - mallard

  # Reverse-proxy service. This should be the only service with
  # publicly-exposed ports.
  proxy:
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
      target: proxy
    networks:
      - mallard
    depends_on:
      - edge
      - gateway
    ports:
      - "{{cookiecutter.host_port}}:8081"
    volumes:
      - ./config/local/nginx:/etc/nginx
      {%- if cookiecutter.proxy_config == "ssl" %}
      - ./config/local/nginx/conf.d/sites-available/mallard.conf:/local-sites-enabled/mallard.conf
      {% else %}
      - ./config/local/nginx/conf.d/sites-available/mallard-no-ssl.conf:/local-sites-enabled/mallard.conf
      {% endif %}

networks:
  # Internal network
  mallard:
